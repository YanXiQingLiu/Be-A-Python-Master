2.1使用多个界定符分割字符串

        你需要将一个字符串分割为多个字段，但是分隔符(还有周围的空格)并不是固定的。

        string 对象的 split() 方法只适应于非常简单的字符串分割情形， 它并不允许有多个分
        隔符或者是分隔符周围不确定的空格。 当你需要更加灵活的切割字符串的时候，最好使
        用 re.split() 方法：

2.2字符串开头或结尾匹配

        你需要通过指定的文本模式去检查字符串的开头或者结尾，比如文件名后缀，URL
        Scheme等等。

        检查字符串开头或结尾的一个简单方法是使用 str.startswith() 或者是 str.endswith()
        方法。

2.3用Shell通配符匹配字符串

        你想使用 Unix Shell 中常用的通配符(比如 *.py , Dat[0-9]*.csv 等)去匹配文本字符串
        
        fnmatch 模块提供了两个函数—— fnmatch() 和 fnmatchcase() ，可以用来实现这样的匹配。
        
2.4字符串匹配和搜索    
        你想匹配或者搜索特定模式的文本

        如果你想匹配的是字面字符串，那么你通常只需要调用基本字符串方法就行， 比如
        str.find() , str.endswith() , str.startswith() 或者类似的方法。
        
2.5字符串搜索和替换 

        你想在字符串中搜索和匹配指定的文本模式
        对于简单的字面模式，直接使用 str.repalce() 方法即可。
        
2.6字符串忽略大小写的搜索替换     
        你需要以忽略大小写的方式搜索与替换文本字符串
        
        为了在文本操作时忽略大小写，你需要在使用 re 模块的时候给这些操作提供re.IGNORECASE 标志参数。
 
2.7最短匹配模式    
        你正在试着用正则表达式匹配某个文本模式，但是它找到的是模式的最长可能匹配。 而你想修改它变成查找最短的可能匹配。

        这个问题一般出现在需要匹配一对分隔符之间的文本的时候(比如引号包含的字符串)。 
        
2.8多行匹配模式  

        你正在试着使用正则表达式去匹配一大块的文本，而你需要跨越多行去匹配。

        这个问题很典型的出现在当你用点(.)去匹配任意字符的时候，忘记了点(.)不能匹配换行符
        的事实。

2.9将Unicode文本标准化

        你正在处理Unicode字符串，需要确保所有字符串在底层有相同的表示。

        在Unicode中，某些字符能够用多个合法的编码表示。

2.10在正则式中使用Unicode
        你正在使用正则表达式处理文本，但是关注的是Unicode字符处理。
        默认情况下 re 模块已经对一些Unicode字符类有了基本的支持。

2.11删除字符串中不需要的字符
        你想去掉文本字符串开头，结尾或者中间不想要的字符，比如空白。
        
        strip() 方法能用于删除开始或结尾的字符。 lstrip() 和 rstrip() 分别从左和从右执行删除操作。 
        默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符。

2.12审查清理文本字符串
        一些无聊的幼稚黑客在你的网站页面表单中输入文本”pýtĥöñ”，然后你想将这些字符清理掉。

        文本清理问题会涉及到包括文本解析与数据处理等一系列问题。 在非常简单的情形下，
        你可能会选择使用字符串函数(比如 str.upper() 和 str.lower() )将文本转为标准格式。
        使用 str.replace() 或者 re.sub() 的简单替换操作能删除或者改变指定的字符序列。 
        你同样还可以使用2.9小节的 unicodedata.normalize() 函数将unicode文本标准化。

        然后，有时候你可能还想在清理操作上更进一步。比如，你可能想消除整个区间上的字符
        或者去除变音符。 为了这样做，你可以使用经常会被忽视的 str.translate() 方法。

2.13字符串对齐
        你想通过某种对齐方式来格式化字符串

        对于基本的字符串对齐操作，可以使用字符串的 ljust() , rjust() 和 center() 方法。

2.14合并拼接字符串
        你想将几个小的字符串合并为一个大的字符串

        如果你想要合并的字符串是在一个序列或者 iterable 中，那么最快的方式就是使用
        join() 方法。

2.15字符串中插入变量
        你想创建一个内嵌变量的字符串，变量被它的值所表示的字符串替换掉。
        Python并没有对在字符串中简单替换变量值提供直接的支持。 但是通过使用字符串的format() 方法来解决这个问题。
        
2.16以指定列宽格式化字符串       
        你有一些长字符串，想以指定的列宽将它们重新格式化。      
        使用 textwrap 模块来格式化字符串的输出。   
        
2.17在字符串中处理html和xml        
        你想将HTML或者XML实体如 &entity; 或 &#code; 替换为对应的文本。 再者，你需要转换文本中特定的字符(比如<, >, 或 &)。
        如果你想替换文本字符串中的 ‘<’ 或者 ‘>’ ，使用 html.escape() 函数可以很容易的完成。
        
2.18字符串令牌解析        
        你有一个字符串，想从左至右将其解析为一个令牌流。
        假如你有下面这样一个文本字符串：
        text = 'foo = 23 + 42 * 10'
        为了令牌化字符串，你不仅需要匹配模式，还得指定模式的类型。 比如，你可能想将字
        符串像下面这样转换为序列对：
        tokens = [('NAME', 'foo'), ('EQ','='), ('NUM', '23'), ('PLUS','+'),
                    ('NUM', '42'), ('TIMES', '*'), ('NUM', 10')]
        
2.19实现一个简单的递归下降分析器        
        你想根据一组语法规则解析文本并执行命令，或者构造一个代表输入的抽象语法树。 
        如果语法非常简单，你可以自己写这个解析器，而不是使用一些框架。
        
        在这个问题中，我们集中讨论根据特殊语法去解析文本的问题。 为了这样做，你首先要以BNF或者EBNF形式指定一个标准语法。
        
 2.20字节字符串上的字符串操作       
        你想在字节字符串上执行普通的文本操作(比如移除，搜索和替换)。
        
        字节字符串同样也支持大部分和文本字符串一样的内置操作。
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        


