1.渐近记法：
    其核心思想是想提供一种资源表示形式，
    主要用于分析某项功能在应对一定规模参数输入时所需要的资源（通常指的是时间，但有时候也包括内存）。
    
    例如将一个程序所需要的运行时间表示为T（n）=2.4n+7，单位无所谓。
    
    
    O(大O)：O记号的定义可以被当作其他两个符号Ω、Θ的基础。
            表达式O（g）代表的是一组与某个函数g（n）有关的函数集合。
             O记法代表的是渐近上界。
             
    Ω（ommega）：Ω记法代表的是渐近下界。

    Θ（theta）：所代表的集合是O记号和Ω记号的交集，即Θ（g）=O（g）∩ Ω（g）

O和Ω是相互可逆的，如果f属于O（g），那么g就属于Ω（f）。


2.几种常见的渐近运行时间实例（时间复杂度）：

    ------------------------------------------------------------------------------------
    时间复杂度    |       相关名称     |       相关示例及说明
    ------------------------------------------------------------------------------------
    Θ(1)         |       常数级       |      哈希表的查询与修改  
    
    Θ(lg n)      |       对数级       |      二分搜索
    
    Θ(n)         |       线性级       |      列表的遍历
    
    Θ(n lg n)    |       线性对数级   |       任意值序列的最优化排序，复杂度等同 Θ(lg n!)
    
    Θ(n^2)       |       平方级       |      拿n个对象进行相互比对
    
    Θ(n^3)       |       立方级       |      Floyd-Warshall算法   
    
    O(n^k)       |       多项式级     |      基于n的k层嵌套循环（k为整数），且必须满足常数k>0  
    
    Ω(k^n)       |       指数级       |      每n项产生一个子集(其中k=2)，且必须满足k>1
    
    Θ(n!)        |       阶乘级       |      对n个值执行全排列操作
    
    ------------------------------------------------------------------------------------
    
    
3.    
    
    
    
    
    
    
        
