1.1 解压序列赋值给多个变量
问题：现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？
解决方案：任何的序列(或者是可迭代对象)可以通过一个简单的赋值语句解压并赋值给多个变量。 唯一的前提就是变量的数量必须跟序列元素的数量是一样的。

1.2 解压可迭代对象赋值给多个变量
问题：如果一个可迭代对象的元素个数超过变量个数时，会抛出一个 ValueError 。 那么怎样才能从这个可迭代对象中解压出 N 个元素出来？
解决方案： Python 的星号表达式可以用来解决这个问题。比如，你在学习一门课程，在学期末的时候， 你想统计下家庭作业的平均成绩，
但是排除掉第一个和最后一个分数。如果只有四个分数，你可能就直接去简单的手动赋值， 但如果有24个呢？这时候星号表达式就派上用场了。

1.3 保留最后 N 个元素
问题：在迭代操作或者其他操作的时候，怎样只保留最后有限几个元素的历史记录？
解决方案：保留有限历史记录正是 collections.deque 大显身手的时候。比如，下面的代码在多行上面做简单的文本匹配， 并只返回在前 N 行中匹配成功的行。

1.4 查找最大或最小的 N 个元素
问题：怎样从一个集合中获得最大或者最小的N个元素列表？
解决方案： heapq 模块有两个函数： nlargest() 和 nsmallest() 可以完美解决这个问题。

1.5 实现一个优先级队列
问题：怎样实现一个按优先级排序的队列？ 并且在这个队列上面每次 pop 操作总是返回优先级最高的那个元素。
解决方案：下面的类利用 heapq 模块实现了一个简单的优先级队列。

1.6 字典中的键映射多个值
问题：怎样实现一个键对应多个值的字典(也叫 multidict )？
解决方案：一个字典就是一个键对应一个单值的映射。如果你想要一个键映射多个值，那么你就需要将这多个值放到另外的容器中， 比如列表或者集合里面。
比如，你可以像下面这样构造这样的字典。
    #d = {'a' : [1, 2, 3],'b' : [4, 5]}
    #e = {'a' : {1, 2, 3},'b' : {4, 5}}
    
1.7 字典排序
问题：你想创建一个字典，并且在迭代或序列化这个字典的时候能够控制元素的顺序。
解决方案：为了能控制一个字典中元素的顺序，你可以使用 collections 模块中的 OrderedDict 类。在迭代操作的时候它会保持元素被插入时的顺序，示例请见C07。

1.8 字典的运算
问题：怎样在数据字典中执行一些计算操作(比如求最小值、最大值、排序等等)？
解决方案：考虑下面的股票名和价格映射字典。

1.9 查找两字典的相同点
问题：怎样在两个字典中寻寻找相同点(比如相同的键、相同的值等等)？
解决方案：考虑下面两个字典：
    a = {'x' : 1,'y' : 2,'z' : 3}
    b = {'w' : 10,'x' : 11,'y' : 2}

1.10 删除序列相同元素并保持顺序
问题：怎样在一个序列上面保持元素顺序的同时消除重复的值？
解决方案：如果序列上的值都是 hashable 类型，那么可以很简单的利用集合或者生成器来解决这个问题。
