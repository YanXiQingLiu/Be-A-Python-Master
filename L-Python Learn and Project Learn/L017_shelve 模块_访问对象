序列化（编组）：在计算机科学与技术中，为了存储或网络传输，把数据转换成字符串（或字节）是常见的操作，
              此过程就叫做序列化，有时候也叫做编组。
pickle 是 Python 特有的序列化形式，相比于JSON ,pickle 更加强大但是不如JSON通用。因为pickle仅局限于Python中。
JavaScript 对象表示法（JSON）数据格式是另一种序列化形式，它被广泛应用于跨语言环境中，尤其在网络中。


shelve 模块结合了dbm模块对文件随机存取的能力和 pickle 模块序列化 Python对象的能力。它并不是一个完美的解决方案，
因为键仍然必须是字符串，并且 pickle 存在的安全问题也同样存在于 shelve中。所以必须确保数据源是安全的。与 dbm 文
件一样，模块不能告诉你修改数据是否被读入内存。所以你必须通过对同样的关键字在此赋值来显式地将任何修改写回到文件。
最后，dbm 文件对于可以存储对象的大小有一些限制，并且它们也并不支持从比如多个线程或用户的并发读取。
  然而，对于很多项目来说，shelve 为存储和访问数据提供了一个简单、轻量级且快速的解决方案。



---------------------------------------------------------------------------------------
>>> import shelve
>>> shelf = shelve.open('fundata.shelve','c')
>>> shelf['tuple'] = (1,2,'a','b',True,False)
>>> shelf['list'] = [[1,2,3],[True,False],[3.14159,-66]]
>>> shelf['list']
[[1, 2, 3], [True, False], [3.14159, -66]]
>>> shelf['tuple']
(1, 2, 'a', 'b', True, False)
>>> shelf.close()    #为了保存数据到硬盘中
---------------------------------------------------------------------------------------

以上代码创建了下面三个文件
      fundata.shelve.bak
      fundata.shelve.dat
      fundata.shelve.dir
一个文件保存了实际数据，其他两个文件保存着dbm (或shelve)用来查找数据文件中记录的索引信息。就是这个索引机制
dbm (或shelve) 远远快于在纯文本文件中的简单顺序搜索。并不应该直接编辑 dbm 文件，因为可能损坏你的数据库。
