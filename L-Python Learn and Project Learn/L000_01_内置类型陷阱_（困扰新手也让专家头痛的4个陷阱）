·内置类型陷阱
  	1.赋值生成应用，而不是拷贝。
  	2.重复能够增加层次深度。
   	3.留意循环数据结构。
    	4.不可变类型不可以在原处改变。

---------------------------------------------------------------------------------	
  ·1.赋值生成应用，而不是拷贝。
	下列这个例子中赋值为L的列表对象不但被L引用，也被赋值为M的内部列表引用。
	在原处修改了L的同时也修改了M：
		>>> L = [1,2,3]    #Embed a reference to L
		>>> M = ['X',L,'Y']
		>>> M
		['X', [1, 2, 3], 'Y']
		>>> L[1] = 0       #Changes M too
		>>> M
		['X', [1, 0, 3], 'Y']
	这种影响通常只是在大型程序中才显得重要，而共享引用往往就是你真正想要的。
	如果不是这样，你可以明确地对他们进行拷贝以避免对象共享。就列表而言，你总
	能通过使用无限制条件的分片生成一个高级拷贝：
		>>> L = [1,2,3]    #Embed a reference to L
		>>> M = ['X',L[:],'Y']
		>>> L[1] = 0	   #Changes only L, not M
		>>> L
		[1, 0, 3]
		>>> M
		['X', [1, 2, 3], 'Y']
 	记住，分片限制的默认为0和所分片段的序列长度——如果两者都省略的话，分片就会
	抽取序列中每一项，这样就生成了一个顶部拷贝(一个新的、无共享的对象)
---------------------------------------------------------------------------------	
  ·2.重复能够增加层次深度。
	序列重复就好像是多次将一个序列加到自己身上。这是事实，但是当可变序列被嵌套时
	效果就不见得总想你所想的那样。
	例如，下面这个例子中的X赋值给重复四次的L，而Y赋值给包含重复四次的L的列表：
		>>> L = [4,5,6]
		>>> X = L * 4          #Like [4,5,6]+[4,5,6]+...
		>>> Y = [L] *4         #[L]+[L]+...=[L,L,...]
		>>> X
		[4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]
		>>> Y
		[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6]]
	由于L在第二次重复中是嵌套的，Y结束嵌套的引用，返回赋值为L的原始列表，所以出现了
	相同类型的副作用：
		>>> L[1] = 0            #Impacts Y but not X
		>>> X
		[4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]
		>>> Y
		[[4, 0, 6], [4, 0, 6], [4, 0, 6], [4, 0, 6]]

---------------------------------------------------------------------------------	
   ·3.留意循环数据结构。
	如果遇到一个复合对象包含指向自身的引用，就称之为循环对象。
	无论何时Python在对象中检测到循环，都会打印成[...],而不会陷入无限循环。
		>>> L = ['grail']
		>>> L.append(L)		#Append reference to same object
		>>> L
		['grail', [...]]	#Generates cycle in object:[...]
	了解两点内容：
		1.方括号括起来的三个点代表对象中带有循环。
		2.如果不小心，循环结构可能导致程序代码陷入无法预期的循环当中。
		    例如：有些程序中保留了已经被访问过的列表或者字典，并通过检测
		          来确定他们是否在循环中。(reloadal.py)
	建议：除非真的需要，否则不要使用循环引用。虽然有很多创建循环的不错的理由，
	      但除非你知道代码会如何处理，否则你可能不想让对象在实际中频繁地引用自身。

---------------------------------------------------------------------------------	
   ·4.不可变类型不可以在原处改变。
	你不能在实地改变不可变对象。如果需要的话，得通过分片、合并等操作来创建一个新的
	对象，再向后赋值给源引用。
		>>> T = (1,2,3)
		>>> T[2] = 4         #Error!
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		TypeError: 'tuple' object does not support item assignment
		>>> T = T[:2] + (4,)  #OK:(1,2,4)
		>>> T
		(1, 2, 4)

	这样做有个好处：当你使用元组和字符串，这样的不可变对象的时候，就不会发生这样的
	Error。因为无法在原处修改，就不会产生列表的那种副作用。
---------------------------------------------------------------------------------	

·Python类型的层次图：

