import os
#确定用户
os.getlogin()
os.getuid()    # not for windows


#读取和修改umask值
os.umask(0b111111111)
bin(18)
os.umask(18)

《Umask二进制映射表》
----------------------------------------------------------------------------------------------
    Umask二进制值                             读，写，执行的值
----------------------------------------------------------------------------------------------
  000                                     读=True，   写=True，  执行=True
  001                                     读=True，   写=True，  执行=False
  010                                     读=True，   写=False， 执行=True
  011                                     读=True，   写=False， 执行=Falsee
  100                                     读=False，  写=True，  执行=True
  101                                     读=False，  写=True，  执行=False
  110                                     读=False，  写=False， 执行=True
  111                                     读=False，  写=False， 执行=False
----------------------------------------------------------------------------------------------


#查看用户所用的操作系统
os.name()    #返回:posix/nt/mac/os2/ce/java

#获得环境变量的字典
os.environ()

#调查进程环境
os.getpid()    #获取当前进程ID
os.getppid()
os.getcwd()    #获取当前工作目录
os.environ['HOME']    #查询HOME环境变量，如果没有则报错KeyError
os.environ['test23']='44'    #创建环境变量名"test23",并赋值为字符串“44”
del(os.environ['test23'])    #删除环境变量"test23"


#获取文件（和设备）的信息--解码文件最新修改时间、解码文件的访问权限信息
import os
os.listdir('.')      #获取'.'目录下列表
os.stat('fileA.txt')    #主要获取st_uid=1001;st_size=257;st_mtime=1388677418;(用户ID、大小、最后的修改日志)
improt time
time.localtime(1388677418)    #根据os.stat获取的st_mtime=1388677418，转换为具体时间信息
time.strftime("%Y-%m-%d",time.localtime(1388677418))    #时间信息格式化
stats=os.stat('fileA.txt')    #获取文件fileA.txt的详细信息。
stats.st_mode
bin(stats.st_mode)[-9:]

实操：
>>> import os
>>> os.listdir('.')
>>> stats=os.stat('Oracle')
>>> import time
>>> time.strftime("%Y-%m-%d",time.localtime(stats.st_mtime))
'2017-02-15'
>>>bin(stats.st_mode)[-9:]
'111111111'      #通过把它们看成3个3位的组，可以分别看到Owner、Group、World的读/写/执行值。
                  这个例子中，所有Owner、Group、World所有的三位都设为1（真）。
                  注意，这些与umask位的意义是直接相反的，不要混淆它们。


其他os函数：
   os.path
   ;os.access();os.F_OK;os.R_OK;os.W_OK;os.X_OK;
   
   os.mkdir('subdir')    #创建目录subdir;
   os.makedirs('test2/newtestdir')   #
   os.chdir('subdir')    #进入subdir目录





# os 模块

os.sep 可以取代操作系统特定的路径分隔符。windows下为 '\\'
os.name 字符串指示你正在使用的平台。比如对于Windows，它是'nt'，而对于Linux/Unix用户，它是 'posix'
os.getcwd() 函数得到当前工作目录，即当前Python脚本工作的目录路径
os.getenv() 获取一个环境变量，如果没有返回none
os.putenv(key, value) 设置一个环境变量值
os.listdir(path) 返回指定目录下的所有文件和目录名
os.remove(path) 函数用来删除一个文件
os.system(command) 函数用来运行shell命令
os.linesep 字符串给出当前平台使用的行终止符。例如，Windows使用 '\r\n'，Linux使用 '\n' 而Mac使用 '\r'
os.path.split(path)  函数返回一个路径的目录名和文件名
os.path.isfile() 和os.path.isdir()函数分别检验给出的路径是一个文件还是目录
os.path.exists() 函数用来检验给出的路径是否真地存在
os.curdir  返回当前目录 ('.')
os.mkdir(path) 创建一个目录
os.makedirs(path) 递归的创建目录
os.chdir(dirname) 改变工作目录到dirname    
os.path.getsize(name) 获得文件大小，如果name是目录返回0L
os.path.abspath(name) 获得绝对路径
os.path.normpath(path) 规范path字符串形式
os.path.splitext()  分离文件名与扩展名
os.path.join(path,name) 连接目录与文件名或目录
os.path.basename(path) 返回文件名
os.path.dirname(path) 返回文件路径
os.walk(top,topdown=True,onerror=None)  遍历迭代目录
os.rename(src, dst)  重命名file或者directory src到dst 如果dst是一个存在的directory, 将抛出OSError. 在Unix, 如果dst在存且是一个file, 如果用户有权限的话，它将被安静的替换. 操作将会失败在某些Unix 中如果src和dst在不同的文件系统中. 如果成功, 这命名操作将会是一个原子操作 (这是POSIX 需要). 在 Windows上, 如果dst已经存在, 将抛出OSError，即使它是一个文件. 在unix，Windows中有效。
os.renames(old, new) 递归重命名文件夹或者文件。像rename()



常用功能：
1 )、os.sep 更改操作系统中的路径分隔符。
2 )、os.getcwd()获取当前路径，这个在Python代码中比较常用。
3 )、os.listdir() 列出当前目录下的所有文件和文件夹。
4 )、os.remove() 方法可以删除指定的文件。
5 )、os.system() 方法用来运行shell命令。
6 )、os.chdir() 改变当前目录，到指定目录中。


